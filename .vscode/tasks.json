{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "[BUILD]",
            "type": "shell",
            "command": "cmake --preset linux-debug && cmake --build --preset linux-debug && cmake --preset linux-release && cmake --build --preset linux-release && cmake --preset windows-debug && cmake --build --preset windows-debug && cmake --preset windows-release && cmake --build --preset windows-release",
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "problemMatcher": [],
            "detail": "Build all release and debug binaries."
        },
        {
            "label": "[MINIMAL BUILD]",
            "type": "shell",
            "command": "cmake --preset linux-debug && cmake --build --preset linux-debug && cmake --preset linux-release && cmake --build --preset linux-release",
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "problemMatcher": [],
            "detail": "Builds the projects Linux binaries."
        },
        {
            "label": "[BUILD + TEST]",
            "group": {
                "kind": "test",
                "isDefault": false
            },
            "dependsOn": [
                "[BUILD]", 
                "[TEST]"
            ],
            "dependsOrder": "sequence",
            "problemMatcher": [],
            "detail": "Build with JSON validation and run Tests. Stops on first failure."
        },
        {
            "label": "[TEST]",
            "type": "shell",
            "command": "python ./Scripts/Validation/json_syntax_and_references.py && python Scripts/TestingSuite.py --stop --verbose && cd ..",
            "group": {
                "kind": "test",
                "isDefault": false
            },
            "problemMatcher": [],
            "detail": "Performs JSON validation on all Resource files and runs the testing suite. Stops on first failure."
        },
        {
            "label": "[PROFILING] On small gravity test",
            "type": "shell",
            "command": "sudo sysctl -w kernel.perf_event_paranoid=-1 ; sudo sysctl -w kernel.kptr_restrict=0 && perf record -F 99 -g -- ./bin/Nebulite_Debug task TaskFiles/Benchmarks/spawn_constantly.nebs ; hotspot perf.data",
            "group": {
                "kind": "test",
                "isDefault": false
            },
            "problemMatcher": [],
            "detail": "Run a debug Task on the Debug binary with perf to profile performance. Shows results both in CLI with perf and in a GUI using hotspot"
        },
        {
            "label": "[PROFILING] On large gravity test",
            "type": "shell",
            "command": "sudo sysctl -w kernel.perf_event_paranoid=-1 ; sudo sysctl -w kernel.kptr_restrict=0 && perf record -F 99 -g -- ./bin/Nebulite_Debug task TaskFiles/Benchmarks/gravity_XL.nebs ; hotspot perf.data",
            "group": {
                "kind": "test",
                "isDefault": false
            },
            "problemMatcher": [],
            "detail": "Run a debug Task on the Debug binary with perf to profile performance. Shows results both in CLI with perf and in a GUI using hotspot."
        },
        {
            "label": "[MEMORY] Check for memory leaks",
            "type": "shell",
            "command": "rm -rf massif_output.out ; ulimit -n 32768 && valgrind --tool=massif --massif-out-file=massif_output.out ./bin/Nebulite_Debug task TaskFiles/Debugging/vscode_memleak_test.nebs && massif-visualizer massif_output.out",
            "group": {
                "kind": "test",
                "isDefault": false
            },
            "problemMatcher": [],
            "detail": "Run a memory leak check using Valgrind's Massif tool."
        },
        {
            "label": "Install language extension",
            "type": "shell",
            "command": "Languages/nebs/nebulite-script-vscode/build-and-install.sh",
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "detail": "Build and install the VSCode language extension for Nebulite Script."
        },
        {
            "label": "Uninstall language extension",
            "type": "shell",
            "command": "code --uninstall-extension nebulite-script-vscode",
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "detail": "Uninstall the VSCode language extension for Nebulite Script."
        },
        {
            "label": "Generate full command documentation",
            "type": "shell",
            "command": "python Scripts/MakeCommandDocumentation.py ; python Languages/nebs/nebulite-script-vscode/scripts/extract_keywords.py",
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "dependsOn": [
                "[BUILD]", 
                "[TEST]"
            ],
            "dependsOrder": "sequence",
            "detail": "Generate full command documentation doc/CommandDocumentation.md as well as list of commands in Languages/nebs/nebulite-script-vscode/syntaxes/keywords.json"
        },
        {
            "label": "[COVERAGE BUILD]",
            "type": "shell",
            "command": "cmake --preset linux-coverage && cmake --build --preset linux-coverage",
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "problemMatcher": [],
            "detail": "Build Nebulite with code coverage instrumentation enabled."
        },
        {
            "label": "[COVERAGE TEST]",
            "type": "shell",
            "command": "python Scripts/TestingSuite.py --coverage --verbose",
            "group": {
                "kind": "test",
                "isDefault": false
            },
            "dependsOn": "[COVERAGE BUILD]",
            "problemMatcher": [],
            "detail": "Run tests with coverage data collection and generate coverage report."
        },
        {
            "label": "[COVERAGE REPORT]",
            "type": "shell",
            "command": "python Scripts/generate_coverage_report.py",
            "group": {
                "kind": "test",
                "isDefault": false
            },
            "problemMatcher": [],
            "detail": "Generate HTML coverage report from existing coverage data."
        },
        {
            "label": "[COVERAGE FULL]",
            "group": {
                "kind": "test",
                "isDefault": false
            },
            "dependsOn": [
                "[COVERAGE BUILD]",
                "[COVERAGE TEST]"
            ],
            "dependsOrder": "sequence",
            "problemMatcher": [],
            "detail": "Complete coverage workflow: build with coverage, run tests, generate report."
        }
    ]
}