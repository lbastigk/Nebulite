# -----------------------------------------------------------------------------
# vscode_debug.nebs
#
# Short description:
#   Minimal task script intended for quick debugging from VS Code. The
#   `.vscode/launch.json` configuration can invoke this file to run a
#   lightweight scene or custom debug test. Depending on the commands in the
#   script the engine may run-and-exit or run interactively while the debugger
#   is attached.
#
# Usage:
#   ./bin/Nebulite task TaskFiles/Debugging/vscode_debug.nebs
#
# Notes:
#   - You may modify this file to suit your debugging needs
#
# TODO: Install per-user, do not track in git
#   Consider creating this file via `./install.sh` and adding it to `.gitignore`
#   so that different users can have different debugging setups without
#   interfering with each other.
# -----------------------------------------------------------------------------
echo Starting vscode_debug.nebs
# -----------------------------------------------------------------------------

set-fps 60
spawn Planets/sun.jsonc
wait 1
exit

###############################
# Setup a scene
task TaskFiles/Simulations/gravity_classic.nebs
clear
time set-fixed-dt 1

###############################
# Wait some time
wait 100

###############################
# Get a render object and manipulate it
clear # This is where the relevant commands start
selected-object get 2
selected-object parse eval echo Selected object with id $05i({self.id}) named {self.text.str}
selected-object parse mirror on
wait 1 # wait one frame for mirror to apply
echo Printing mirrror:
print mirror.renderObject.id2
echo done!
exit

# Setup continous tasks
always clear
always print mirror.renderObject.id2
#always selected-object parse print
always eval echo Position: ({global.mirror.renderObject.id2.posX},{global.mirror.renderObject.id2.posY})

# TODO: Position does not update, why not?
# posX and posY are the only fields that are not synced!
# Renderer position rendering works fine, so issue must be in the retrieval of a document?
# is it because posX and posY are not inside a field? Is there a difference in how they are handled?
# What works:
# physics.aX, physics.aY
# physics.vX, physics.vY
# They all sync correctly.
# posX and posY are seemingly stuck at their values after the first update: 353.43.. and 488.01..
# Idea: Maybe flush does not know whether to flush the normal cache or the double-buffered cache?
# Add a field to each value that indicates which value is newer? Or see if we can simply improve flush?

# - The first access locks in the value, subsequent accesses remain the same
# - perhaps, with get, we set a cached value, and subsequent accesses use that cached value instead of new values?
