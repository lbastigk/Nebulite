# -----------------------------------------------------------------------------
# vscode_debug.nebs
#
# Short description:
#   Minimal task script intended for quick debugging from VS Code. The
#   `.vscode/launch.json` configuration can invoke this file to run a
#   lightweight scene or custom debug test. Depending on the commands in the
#   script the engine may run-and-exit or run interactively while the debugger
#   is attached.
#
# Usage:
#   ./bin/Nebulite task TaskFiles/Debugging/vscode_debug.nebs
#
# Notes:
#   - You may modify this file to suit your debugging needs
#
# TODO: Install per-user, do not track in git
#   Consider creating this file via `./install.sh` and adding it to `.gitignore`
#   so that different users can have different debugging setups without
#   interfering with each other.
# -----------------------------------------------------------------------------
echo Starting vscode_debug.nebs
# -----------------------------------------------------------------------------



###############################
# Setup a scene
# One object is enough for testing
# And much easier to debug
set-fps 1
set physics.G 10 # Gravity constant, high value for testing
time set-fixed-dt 1
spawn Planets/sun.jsonc|set posX 750|set posY 500|set text.str SUN1
spawn Planets/sun.jsonc|set posX 250|set posY 500|set text.str SUN2

###############################
# Setup mirror
selected-object get 1
selected-object parse mirror on
selected-object get 2
selected-object parse mirror on
wait 1

###############################
#always inputwait # Wait for user input before each debug output
always clear
always echo -------------------------------------------
always eval echo SUN1:  p({global.mirror.renderObject.id1.posX},{global.mirror.renderObject.id1.posY})
always eval echo SUN1:  v({global.mirror.renderObject.id1.physics.vX},{global.mirror.renderObject.id1.physics.vY})
always eval echo SUN1:  a({global.mirror.renderObject.id1.physics.aX},{global.mirror.renderObject.id1.physics.aY})
always eval echo SUN1:  mass {global.mirror.renderObject.id1.physics.mass}
always eval echo
always eval echo SUN2:  p({global.mirror.renderObject.id2.posX},{global.mirror.renderObject.id2.posY})
always eval echo SUN2:  v({global.mirror.renderObject.id2.physics.vX},{global.mirror.renderObject.id2.physics.vY})
always eval echo SUN2:  a({global.mirror.renderObject.id2.physics.aX},{global.mirror.renderObject.id2.physics.aY})
always eval echo SUN2:  mass {global.mirror.renderObject.id2.physics.mass}
always eval echo
always eval echo time.dt   : {global.time.dt}
always eval echo physics.G : {global.physics.G}
always eval echo
always echo -------------------------------------------